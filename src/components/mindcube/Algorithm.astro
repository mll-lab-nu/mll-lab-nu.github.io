---
// Algorithm.astro - Leaderboard section showing model performance comparisons
---

<section id="leaderboard" class="content-section alt-background">
  <div class="section-container">
    <h2 class="section-title">Leaderboard</h2>
    <p class="section-description">Performance comparison of different models and approaches on our spatial reasoning benchmark.</p>
    
    <div class="leaderboard-container">
      <div class="table-controls">
        <p class="sort-info">Click on column headers to sort the results</p>
        <div class="model-legend">
          <span class="legend-item">
            <span class="legend-color baseline-legend"></span>
            Baseline
          </span>
          <span class="legend-item">
            <span class="legend-color open-weight-legend"></span>
            Open-Weight Multi Image Models
          </span>
          <span class="legend-item">
            <span class="legend-color proprietary-legend"></span>
            Proprietary Models
          </span>
          <span class="legend-item">
            <span class="legend-color spatial-legend"></span>
            Spatial Models
          </span>
        </div>
      </div>
      
      <div class="table-wrapper">
        <table class="leaderboard-table" id="leaderboardTable">
          <thead>
            <tr>
              <th class="sortable" data-column="0">
                Method
                <span class="sort-arrow">↕</span>
              </th>
              <th class="sortable highlighted-overall" data-column="1">
                Overall
                <span class="sort-arrow">↕</span>
              </th>
              <th class="sortable highlighted-rotation" data-column="2">
                Rotation
                <span class="sort-arrow">↕</span>
              </th>
              <th class="sortable highlighted-among" data-column="3">
                Among
                <span class="sort-arrow">↕</span>
              </th>
              <th class="sortable highlighted-around" data-column="4">
                Around
                <span class="sort-arrow">↕</span>
              </th>
            </tr>
          </thead>
          <tbody>
            <!-- Baseline Models -->
            <tr class="baseline-model" data-values='["Random (chance)", 32.35, 36.36, 32.29, 30.66]'>
              <td class="model-name">Random (chance)</td>
              <td>32.35</td>
              <td>36.36</td>
              <td>32.29</td>
              <td>30.66</td>
            </tr>
            <tr class="baseline-model" data-values='["Random (frequency)", 33.02, 38.30, 32.66, 35.79]'>
              <td class="model-name">Random (frequency)</td>
              <td>33.02</td>
              <td>38.30</td>
              <td>32.66</td>
              <td>35.79</td>
            </tr>
            
            <!-- Open-Weight Multi Image Models -->
            <tr class="open-weight-model highlight-top" data-values='["LLaVA-Onevision-7B", 47.43, 36.45, 48.42, 44.09]'>
              <td class="model-name">LLaVA-Onevision-7B</td>
              <td class="score-highlight">47.43</td>
              <td>36.45</td>
              <td class="score-highlight">48.42</td>
              <td>44.09</td>
            </tr>
            <tr class="open-weight-model highlight-top" data-values='["DeepSeek-VL2-Small", 47.62, 37.00, 50.38, 26.91]'>
              <td class="model-name">DeepSeek-VL2-Small</td>
              <td class="score-highlight-strong">47.62</td>
              <td>37.00</td>
              <td class="score-highlight-strong">50.38</td>
              <td>26.91</td>
            </tr>
            <tr class="open-weight-model" data-values='["Gemma-3-12B-it", 46.67, 38.39, 48.38, 34.63]'>
              <td class="model-name">Gemma-3-12B-it</td>
              <td>46.67</td>
              <td>38.39</td>
              <td>48.38</td>
              <td>34.63</td>
            </tr>
            <tr class="open-weight-model" data-values='["mPLUG-Owl3-7B-241101", 44.85, 37.84, 47.11, 26.91]'>
              <td class="model-name">mPLUG-Owl3-7B-241101</td>
              <td>44.85</td>
              <td>37.84</td>
              <td>47.11</td>
              <td>26.91</td>
            </tr>
            <tr class="open-weight-model" data-values='["LLaVA-Video-Qwen-7B", 41.96, 35.71, 43.55, 30.12]'>
              <td class="model-name">LLaVA-Video-Qwen-7B</td>
              <td>41.96</td>
              <td>35.71</td>
              <td>43.55</td>
              <td>30.12</td>
            </tr>
            <tr class="open-weight-model" data-values='["Mantis-8B (SigLip)", 41.05, 37.65, 40.23, 50.99]'>
              <td class="model-name">Mantis-8B (SigLip)</td>
              <td>41.05</td>
              <td>37.65</td>
              <td>40.23</td>
              <td class="score-highlight-strong">50.99</td>
            </tr>
            <tr class="open-weight-model" data-values='["Idefics-8B-Llama3", 35.86, 35.15, 35.94, 35.49]'>
              <td class="model-name">Idefics-8B-Llama3</td>
              <td>35.86</td>
              <td>35.15</td>
              <td>35.94</td>
              <td>35.49</td>
            </tr>
            <tr class="open-weight-model" data-values='["Qwen2.5-VL-3B-Instruct", 33.21, 37.37, 33.26, 30.34]'>
              <td class="model-name">Qwen2.5-VL-3B-Instruct</td>
              <td>33.21</td>
              <td>37.37</td>
              <td>33.26</td>
              <td>30.34</td>
            </tr>
            <tr class="open-weight-model" data-values='["LongVA-7B", 29.46, 35.89, 29.55, 24.88]'>
              <td class="model-name">LongVA-7B</td>
              <td>29.46</td>
              <td>35.89</td>
              <td>29.55</td>
              <td>24.88</td>
            </tr>
            <tr class="open-weight-model" data-values='["Qwen2.5-VL-7B-Instruct", 29.26, 38.76, 29.50, 21.35]'>
              <td class="model-name">Qwen2.5-VL-7B-Instruct</td>
              <td>29.26</td>
              <td class="score-highlight">38.76</td>
              <td>29.50</td>
              <td>21.35</td>
            </tr>
            <tr class="open-weight-model" data-values='["InternVL2.5-8B", 18.68, 36.45, 18.20, 13.11]'>
              <td class="model-name">InternVL2.5-8B</td>
              <td>18.68</td>
              <td>36.45</td>
              <td>18.20</td>
              <td>13.11</td>
            </tr>
            
            <!-- Proprietary Models -->
            <tr class="proprietary-model" data-values='["GPT-4o", 38.81, 32.65, 40.17, 29.16]'>
              <td class="model-name">GPT-4o</td>
              <td>38.81</td>
              <td>32.65</td>
              <td>40.17</td>
              <td>29.16</td>
            </tr>
            <tr class="proprietary-model" data-values='["Claude-4-Sonnet-20250514", 44.75, 48.42, 44.21, 47.62]'>
              <td class="model-name">Claude-4-Sonnet-20250514</td>
              <td>44.75</td>
              <td class="score-highlight-strong">48.42</td>
              <td>44.21</td>
              <td class="score-highlight">47.62</td>
            </tr>
            
            <!-- Spatial Models -->
            <tr class="spatial-model" data-values='["RoboBrain", 37.38, 35.80, 38.28, 29.53]'>
              <td class="model-name">RoboBrain</td>
              <td>37.38</td>
              <td>35.80</td>
              <td>38.28</td>
              <td>29.53</td>
            </tr>
            <tr class="spatial-model" data-values='["Space-Qwen", 33.28, 38.02, 33.71, 26.32]'>
              <td class="model-name">Space-Qwen</td>
              <td>33.28</td>
              <td>38.02</td>
              <td>33.71</td>
              <td>26.32</td>
            </tr>
            <tr class="spatial-model" data-values='["Spatial-MLLM", 32.06, 38.39, 20.92, 32.82]'>
              <td class="model-name">Spatial-MLLM</td>
              <td>32.06</td>
              <td>38.39</td>
              <td>20.92</td>
              <td>32.82</td>
            </tr>
            <tr class="spatial-model" data-values='["SpaceMantis", 22.81, 37.65, 21.26, 29.32]'>
              <td class="model-name">SpaceMantis</td>
              <td>22.81</td>
              <td>37.65</td>
              <td>21.26</td>
              <td>29.32</td>
            </tr>
          </tbody>
        </table>
      </div>
    </div>
  </div>
</section>

<style>


  .leaderboard-container {
    margin: 2rem 0;
  }

  .table-controls {
    margin-bottom: 1rem;
    text-align: center;
  }

  .sort-info {
    color: #666;
    font-style: italic;
    margin: 0 0 1rem 0;
  }

  .model-legend {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    gap: 1.5rem;
    margin-bottom: 1rem;
  }

  .legend-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
    color: #555;
  }

  .legend-color {
    width: 16px;
    height: 16px;
    border-radius: 4px;
    border: 1px solid #ddd;
  }

  .baseline-legend {
    background-color: #f8f9fa;
  }

  .open-weight-legend {
    background-color: #f0f8ff;
  }

  .proprietary-legend {
    background-color: #fff5f0;
  }

  .spatial-legend {
    background-color: #f0fff0;
  }

  .table-wrapper {
    overflow-x: auto;
    border-radius: 12px;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    background: white;
  }

  .leaderboard-table {
    width: 100%;
    border-collapse: collapse;
    font-size: 0.95rem;
  }

  .leaderboard-table th {
    background: linear-gradient(135deg, #2a2f6c, #3a4b8e);
    color: white;
    padding: 1rem 0.8rem;
    text-align: center;
    font-weight: 600;
    position: relative;
    border-right: 1px solid rgba(255, 255, 255, 0.1);
    cursor: pointer;
    user-select: none;
    transition: background-color 0.2s ease;
  }

  .leaderboard-table th:hover {
    background: linear-gradient(135deg, #3a4b8e, #4a5b9e);
  }

  .leaderboard-table th:last-child {
    border-right: none;
  }

  .sortable .sort-arrow {
    position: absolute;
    right: 8px;
    top: 50%;
    transform: translateY(-50%);
    opacity: 0.7;
    font-size: 0.8rem;
  }

  .sortable.sorted-asc .sort-arrow::after {
    content: " ↑";
    color: #ffd700;
  }

  .sortable.sorted-desc .sort-arrow::after {
    content: " ↓";
    color: #ffd700;
  }

  /* Header highlighting */
  .highlighted-overall {
    background: linear-gradient(135deg, #e8e8e8, #f0f0f0) !important;
    color: #333 !important;
  }

  .highlighted-rotation {
    background: linear-gradient(135deg, #CFDDA6, #d9e7b6) !important;
    color: #333 !important;
  }

  .highlighted-among {
    background: linear-gradient(135deg, #DABFDA, #e5cfea) !important;
    color: #333 !important;
  }

  .highlighted-around {
    background: linear-gradient(135deg, #FDEEC7, #fef5d7) !important;
    color: #333 !important;
  }

  .leaderboard-table td {
    padding: 0.8rem;
    text-align: center;
    border-bottom: 1px solid #f0f0f0;
    transition: background-color 0.2s ease;
  }

  .model-name {
    text-align: left !important;
    font-weight: 500;
    color: #2a2f6c;
  }



  /* Model type backgrounds */
  .baseline-model {
    background-color: #f8f9fa;
    color: #6c757d;
    font-style: italic;
  }

  .baseline-model:hover {
    background-color: #e9ecef;
  }

  .open-weight-model {
    background-color: #f0f8ff;
  }

  .open-weight-model:hover {
    background-color: #e6f3ff;
  }

  .proprietary-model {
    background-color: #fff5f0;
  }

  .proprietary-model:hover {
    background-color: #ffe6d9;
  }

  .spatial-model {
    background-color: #f0fff0;
  }

  .spatial-model:hover {
    background-color: #e6ffe6;
  }

  /* Score highlighting */
  .score-highlight {
    background-color: rgba(66, 139, 202, 0.2);
    font-weight: 600;
    border-radius: 4px;
    padding: 0.2rem 0.4rem;
  }

  .score-highlight-strong {
    background-color: rgba(66, 139, 202, 0.4);
    font-weight: 700;
    border-radius: 4px;
    padding: 0.2rem 0.4rem;
    color: #1e3a5f;
  }

  .highlight-top {
    border-left: 4px solid #428bca;
  }

  .leaderboard-notes {
    margin-top: 2rem;
    padding: 2rem;
    background: linear-gradient(135deg, #f8f9fa, #ffffff);
    border-radius: 12px;
    border: 1px solid #e9ecef;
  }

  .leaderboard-notes h3 {
    margin-top: 0;
    color: #2a2f6c;
    font-size: 1.3rem;
  }

  .leaderboard-notes ul {
    margin-bottom: 0;
  }

  .leaderboard-notes li {
    margin-bottom: 0.7rem;
    line-height: 1.5;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .leaderboard-table {
      font-size: 0.85rem;
    }

    .leaderboard-table th,
    .leaderboard-table td {
      padding: 0.6rem 0.4rem;
    }

    .model-name {
      font-size: 0.8rem;
    }

    .model-legend {
      flex-direction: column;
      align-items: center;
      gap: 0.8rem;
    }

    .legend-item {
      font-size: 0.85rem;
    }
  }
</style>

<script>
  // Add sorting functionality
  document.addEventListener('DOMContentLoaded', function() {
    const table = document.getElementById('leaderboardTable') as HTMLTableElement | null;
    if (!table) return;
    
    const headers = table.querySelectorAll('th.sortable');
    
    headers.forEach((header, index) => {
      header.addEventListener('click', () => {
        sortTable(index);
      });
    });
    
    let currentSort = { column: 1, direction: 'desc' as 'asc' | 'desc' };
    
    function sortTable(columnIndex: number) {
      if (!table) return;
      
      const tbody = table.querySelector('tbody');
      if (!tbody) return;
      
      const rows = Array.from(tbody.querySelectorAll('tr')) as HTMLTableRowElement[];
      
      // Determine sort direction
      if (currentSort.column === columnIndex) {
        currentSort.direction = currentSort.direction === 'asc' ? 'desc' : 'asc';
      } else {
        currentSort.direction = 'desc';
        currentSort.column = columnIndex;
      }
      
      // Update header indicators
      headers.forEach(h => {
        h.classList.remove('sorted-asc', 'sorted-desc');
      });
      headers[columnIndex]?.classList.add(`sorted-${currentSort.direction}`);
      
      // Sort rows
      rows.sort((a, b) => {
        const aDataset = (a as HTMLTableRowElement).dataset.values;
        const bDataset = (b as HTMLTableRowElement).dataset.values;
        
        if (!aDataset || !bDataset) return 0;
        
        const aValues = JSON.parse(aDataset);
        const bValues = JSON.parse(bDataset);
        
        let aVal = aValues[columnIndex];
        let bVal = bValues[columnIndex];
        
        if (columnIndex === 0) { // Model name - string comparison
          aVal = aVal.toLowerCase();
          bVal = bVal.toLowerCase();
          return currentSort.direction === 'asc' ? 
            aVal.localeCompare(bVal) : bVal.localeCompare(aVal);
        } else { // Numeric comparison
          aVal = parseFloat(aVal);
          bVal = parseFloat(bVal);
          return currentSort.direction === 'asc' ? aVal - bVal : bVal - aVal;
        }
      });
      
      // Re-insert sorted rows
      rows.forEach(row => tbody.appendChild(row));
    }
    
    // Initial sort by overall score
    sortTable(1);
  });
</script> 
