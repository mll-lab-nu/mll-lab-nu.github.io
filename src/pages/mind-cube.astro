---
import MindCubeLayout from '../layouts/MindCubeLayout.astro';
import Hero from '../components/mindcube/Hero.astro';
import Algorithm from '../components/mindcube/Algorithm.astro';
// import ChartsSection from '../components/mindcube/ChartsSection.astro';
import FindingsSection from '../components/mindcube/FindingsSection.astro';
// import TrajectoryViewer from '../components/mindcube/TrajectoryViewer.astro';  // Hidden but preserved
import DatasetViewer from '../components/mindcube/DatasetViewer.astro';
import AuthorsCitation from '../components/mindcube/AuthorsCitation.astro';

// Import component-specific styles
import '../styles/mindcube/section.css';
import '../styles/mindcube/hero.css';
import '../styles/mindcube/authors.css';
import '../styles/mindcube/resources.css';
// import '../styles/mindcube/trajectoryViewer.css';  // Hidden but preserved
import '../styles/mindcube/datasetViewer.css';

const pageTitle = "Mind Cube - Spatial Mental Modeling from Limited Views | MLL Lab";
---
<MindCubeLayout title={pageTitle}>
  <!-- 1. Teaser Section -->
  <Hero />
  
  <!-- 2. Dataset Viewer Section -->
  <DatasetViewer />
  
  <!-- 3. Leaderboard Section -->
  <Algorithm />
  
  <!-- 4. Key Findings Section -->
  <FindingsSection />
  
  <!-- Trajectory Viewer Section (Original Data Viewer) - Hidden but preserved -->
  <!-- <TrajectoryViewer /> -->
  
  <!-- 5. Citation Section -->
  <AuthorsCitation />
</MindCubeLayout>

<script>
  // import { initTrajectoryViewer } from '../scripts/trajectoryViewer';  // Hidden but preserved
  import { initDatasetViewer } from '../scripts/datasetViewer';
  import { initCitationCopy } from '../scripts/citation';

  document.addEventListener('DOMContentLoaded', () => {
    // Initialize citation copy functionality
    initCitationCopy();
    
    // Initialize trajectory viewer - Hidden but preserved
    // initTrajectoryViewer();
    
    // Initialize dataset viewer
    initDatasetViewer();

    // Text animation for hero section
    const animateTitle = () => {
      const titleElement = document.getElementById('animated-title');
      
      if (titleElement) {
        // Handle the new two-line title structure
        const titleLines = titleElement.querySelectorAll('.title-line');
        
        titleLines.forEach((line, lineIndex) => {
          const lineText = (line as HTMLElement).innerText;
          (line as HTMLElement).innerHTML = '';
          
          for (let i = 0; i < lineText.length; i++) {
            const charSpan = document.createElement('span');
            charSpan.className = 'reveal-char';
            charSpan.style.animationDelay = `${(lineIndex * lineText.length + i) * 0.05}s`;
            
            // Special handling for spaces to ensure they display correctly
            if (lineText[i] === ' ') {
              charSpan.innerHTML = '&nbsp;';
            } else {
              charSpan.innerText = lineText[i];
            }
            
                         (line as HTMLElement).appendChild(charSpan);
          }
        });
      }
    };
    
    // Run animation
    animateTitle();
  });
</script>