---
import Layout from '../layouts/Layout.astro';
import Container from '../components/ui/Container.astro';
import selectedPublications from '../data/selected_publications.json';

const resourceOrder = [
  'website',
  'pdf',
  'code',
  'data',
  'blog',
  'arxiv',
  'slides',
  'poster',
  'video',
  'demo',
  'docs',
  'project',
  'huggingface',
  'models',
  'logs',
  'media',
  'tl;dr',
  'pypi',
  'docker',
  'github',
  'code_data',
  'report'
];

const resourceLabelMap: Record<string, string> = {
  website: 'Website',
  pdf: 'PDF',
  code: 'Code',
  data: 'Data',
  blog: 'Blog',
  arxiv: 'arXiv',
  slides: 'Slides',
  poster: 'Poster',
  video: 'Video',
  demo: 'Demo',
  docs: 'Docs',
  project: 'Project',
  huggingface: 'HuggingFace',
  models: 'Models',
  logs: 'Logs',
  media: 'Media',
  'tl;dr': 'TL;DR',
  pypi: 'PyPI',
  docker: 'Docker',
  github: 'GitHub',
  code_data: 'Code/Data',
  report: 'Report'
};

const pickLink = (resources: Record<string, string>) => {
  for (const key of resourceOrder) {
    if (resources[key]) {
      return resources[key];
    }
  }
  const values = Object.values(resources);
  return values.length > 0 ? values[0] : '#';
};

const formatResourceLabel = (key: string) => {
  if (resourceLabelMap[key]) {
    return resourceLabelMap[key];
  }
  return key
    .replace(/_/g, ' ')
    .split(' ')
    .map((segment) =>
      segment.length <= 3 ? segment.toUpperCase() : segment.charAt(0).toUpperCase() + segment.slice(1)
    )
    .join(' ');
};

const pubs = Object.entries(selectedPublications)
  .map(([year, items]) => ({
    year,
    publications: items.map((item) => {
      const resources = (item as any).resources ?? {};
      return {
        title: (item as any).title ?? '',
        link: pickLink(resources),
        authors: (item as any).authors ?? '',
        note: Array.isArray((item as any).notes)
          ? (item as any).notes
          : (item as any).notes
          ? [(item as any).notes]
          : [],
        conference_title: (item as any).conference ?? '',
        conference_misc: '',
        resources
      };
    })
  }))
  .sort((a, b) => Number(b.year) - Number(a.year));

---

<Layout title="MLL Lab â€” Publications">
	<main class="bg-background-light py-12">
		<Container maxWidth="xl">
			<h1 class="text-4xl md:text-6xl font-heading font-bold text-secondary-900 text-center mb-12">Publications</h1>
			
			<div class="max-w-4xl mx-auto">
				{pubs.map((item) => (
					<section class="mb-12">
						<h2 class="text-2xl font-heading font-bold text-primary-700 mb-6 pb-2 border-b border-secondary-200">{item.year}</h2>
						<ul class="space-y-8">
							{item.publications.map((pub) => ( 
								<li class="bg-white p-6 rounded-xl shadow-soft">
									<a
										href={pub.link}
										class="text-xl font-heading font-semibold text-primary-600 hover:underline"
										target={pub.link && pub.link !== '#' ? '_blank' : undefined}
										rel={pub.link && pub.link !== '#' ? 'noopener' : undefined}
									>
										{pub.title}
									</a>
									<p class="text-secondary-700 my-2">{pub.authors}</p>
									{(pub.conference_title || pub.conference_misc) && (
										<p class="text-secondary-500 text-sm mb-2">
											{pub.conference_title}
											{pub.conference_misc}
										</p>
									)}
									
									{pub.note && 
										<div class="my-2">
											{Array.isArray(pub.note) 
												? pub.note.map((noteItem) => (
													<span class="inline-block bg-accent-100 text-accent-700 px-3 py-1 rounded-full text-sm font-medium mr-2 mb-2">
														{noteItem}
													</span>
												))
												: <span class="inline-block bg-accent-100 text-accent-700 px-3 py-1 rounded-full text-sm font-medium">
													{pub.note}
												</span>
											}
										</div>
									}
									
									{pub.resources && Object.keys(pub.resources).length > 0 && (
										<div class="flex flex-wrap gap-2 my-3">
											{Object.entries(pub.resources)
												.sort((a, b) => {
													const idxA = resourceOrder.includes(a[0]) ? resourceOrder.indexOf(a[0]) : resourceOrder.length;
													const idxB = resourceOrder.includes(b[0]) ? resourceOrder.indexOf(b[0]) : resourceOrder.length;
													return idxA === idxB ? a[0].localeCompare(b[0]) : idxA - idxB;
												})
												.map(([key, url]) => (
													<a
														href={url}
														class="inline-flex items-center justify-center px-3 py-1 text-xs font-medium text-white bg-primary-600 hover:bg-primary-700 rounded-md"
														target="_blank"
														rel="noopener"
													>
														{formatResourceLabel(key)}
													</a>
												))}
										</div>
									)}
								</li>
							))}
						</ul>
					</section>
				))}
			</div>
		</Container>
	</main>
</Layout>
